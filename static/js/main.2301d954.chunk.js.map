{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","className","poster","this","props","title","genres","map","genre","index","key","text","synopsis","maxLine","ellipsis","trimRight","basedOn","Component","MovieGenre","MoviePoster","src","alt","App","state","componentWillMount","a","_getMovies","console","log","_renderMovies","movies","movie","title_english","medium_cover_image","_callAPI","fetch","then","response","json","data","catch","err","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8UAMMA,E,uKAQE,OACI,yBAAKC,UAAU,SACX,yBAAKA,UAAU,iBACV,kBAAC,EAAD,CAAaC,OAAUC,KAAKC,MAAMF,UAEvC,yBAAKD,UAAU,iBACX,gCAAME,KAAKC,MAAMC,OACjB,yBAAKJ,UAAU,iBACTE,KAAKC,MAAME,OAAOC,KAAK,SAACC,EAAOC,GAC7B,OAAO,kBAAC,EAAD,CAAYD,MAASA,EAAOE,IAAMD,QAG3C,yBAAKR,UAAU,mBACjB,kBAAC,IAAD,CACEU,KAAMR,KAAKC,MAAMQ,SACjBC,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,mB,GA1BdC,aAoCdC,EAAa,SAAC,GAAa,IAAZV,EAAW,EAAXA,MACrB,OAAO,0BAAMP,UAAU,gBAAgBO,IAIjCW,EAAc,SAAC,GAAoB,IAAnBd,EAAkB,EAAlBA,MAAOH,EAAW,EAAXA,OACzB,OACI,yBAAKkB,IAAMlB,EAAQD,UAAU,gBAAgBoB,IAAMhB,KAK5CL,ICRAsB,E,4MAzCbC,MAAO,G,EAEPC,mB,sBAAqB,sBAAAC,EAAA,sEACb,EAAKC,aADQ,OAEnBC,QAAQC,IAAI,EAAKL,OAFE,2C,EAKrBM,cAAgB,WASd,OARe,EAAKN,MAAMO,OAAOvB,KAAK,SAACwB,EAAMtB,GAC1C,OAAO,kBAAC,EAAD,CAAOJ,MAAO0B,EAAMC,cAC3B9B,OAAU6B,EAAME,mBACjBvB,IAAMD,EACNH,OAASyB,EAAMzB,OACfM,SAAYmB,EAAMnB,e,EAMtBsB,SAAW,WACT,OAAOC,MAAM,yDACZC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAASF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKT,UAC1DU,OAAM,SAAAC,GAAG,OAAId,QAAQC,IAAIa,O,EAG5Bf,W,sBAAa,4BAAAD,EAAA,sEACU,EAAKS,WADf,OACLJ,EADK,OAEX,EAAKY,SAAS,CACZZ,OAASA,IAHA,2C,uDAQX,OACE,yBAAK7B,UAAWE,KAAKoB,MAAMO,OAAS,MAAQ,gBACxC3B,KAAKoB,MAAMO,OAAS3B,KAAK0B,gBAAkB,e,GApCnCZ,aCQE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdjB,OAAM,SAAAkB,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.2301d954.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport './Movie.css';\r\nimport PropTypes from \"prop-types\";\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\n\r\n\r\nclass Movie extends Component{\r\n    static propTypes = {\r\n        title : PropTypes.string.isRequired,\r\n        poster : PropTypes.string.isRequired,\r\n        synopsis : PropTypes.string.isRequired,\r\n        genres : PropTypes.array\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"Movie\">\r\n                <div className=\"Movie__Column\">\r\n                     <MoviePoster poster = {this.props.poster}/>\r\n                </div>\r\n                <div className=\"Movie__Column\">\r\n                    <h2> {this.props.title}</h2>\r\n                    <div className=\"Movie__Genres\">\r\n                         {this.props.genres.map( (genre, index) =>{\r\n                            return <MovieGenre genre = {genre} key ={index}></MovieGenre>\r\n                          })}\r\n                    </div>     \r\n                          <div className=\"Movie__Synopsis\">\r\n                        <LinesEllipsis\r\n                          text={this.props.synopsis}\r\n                          maxLine=\"4\"\r\n                          ellipsis='...'\r\n                          trimRight\r\n                          basedOn='letters'\r\n                        />\r\n                        </div>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst MovieGenre = ({genre}) => {\r\nreturn <span className=\"Movie__Genre\">{genre }</span>\r\n}\r\n\r\n\r\nconst MoviePoster = ({title, poster}) =>{\r\n    return (\r\n        <img src ={poster} className=\"Movie__Poster\" alt ={title}/>\r\n           \r\n    )\r\n}\r\n\r\nexport default Movie;\r\n","import React,{Component} from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component{\n  state ={};\n\n  componentWillMount = async() =>{\n    await this._getMovies();\n    console.log(this.state);\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map( (movie,index) => {\n       return <Movie title={movie.title_english}\n       poster = {movie.medium_cover_image}\n      key ={index} \n      genres ={movie.genres}\n      synopsis = {movie.synopsis}\n      />\n    });\n    return movies\n\n  }\n  _callAPI = () =>{\n    return fetch(\"https://yts.mx/api/v2/list_movies.json?sort_by=rating\")\n    .then(response => response.json() ).then(json => json.data.movies ) \n    .catch(err => console.log(err));\n\n  }\n  _getMovies = async() =>{\n    const movies = await this._callAPI();\n    this.setState({\n      movies : movies\n    });\n  }\n\n  render(){\n    return(\n      <div className={this.state.movies ? \"App\" : \"App--loading\"}>\n         {this.state.movies ? this._renderMovies() : \"Loading\"}\n      </div>       \n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}